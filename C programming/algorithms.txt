1. Stack using linked list::
            Step 1: Define the Node Structure
            Step 2: Define the Stack Structure (Class or Structure)
                The stack will have:
                    A pointer (top) that points to the top of the stack (the most recently added node).
                    Methods to perform operations on the stack: push, pop, peek, isEmpty.
            Step 3: Initialize the Stack
                To begin using the stack, initialize it by creating an object of the Stack class. This will automatically set the top pointer to None, indicating the stack is empty.
            Step 4: Implement the push() Operation
                The push operation adds a new element to the top of the stack:
                    Create a new node with the given value.
                    Set the new node’s next pointer to the current top node.
                    Update the top pointer to point to the new node.
            Step 5: Implement the pop() Operation
                The pop operation removes the element from the top of the stack:
                Check if the stack is empty (i.e., if top is None). If the stack is empty, throw an error (stack underflow).
                Save the current top node in a temporary variable.
                Update the top pointer to the next node in the stack (top.next).
                Deallocate (delete) the old top node and return its value.
            Step 6: Implement the peek() Operation
                The peek operation allows you to view the value of the top element without removing it:

                Check if the stack is empty (i.e., if top is None). If the stack is empty, throw an error (stack underflow).
                Return the data of the top node.
                                    
2. Queue using linked list:
            Step 1: . Define the Node Structure
                    Each node in the linked list represents an element in the queue. The node has two parts:
                    Data: Stores the actual value.
                    Next: Points to the next node in the queue.
            step 2: Define the Queue Class
                    The queue class will contain two main pointers:
                    Front: Points to the first element of the queue (head of the linked list).
                    Rear: Points to the last element of the queue (tail of the linked list).
                    We also need to keep track of the size of the queue (optional but useful for some operations).
            step 3: Enqueue Operation (Add to the Rear)
                    To enqueue an item, create a new node and:
                    If the queue is empty, both the front and rear will point to this new node.
                    If the queue is not empty, link the current rear to the new node and update the rear pointer to the new node.
            step 4:  Dequeue Operation (Remove from the Front)
                    To dequeue an item, remove the front node and:
                    If there is only one node in the queue (i.e., both front and rear are the same), update both the front and rear pointers to None.
                    If there are more nodes, update the front pointer to point to the next node
            Step 5: Display

3. Binary Search Tree:
Step-by-Step Algorithm for Insertion in a Binary Search Tree (BST):
        Start at the root:

        If the root is None (i.e., the tree is empty), create a new node with the given value and return it as the root. This will be the base case for the recursion.
        Compare the key (value to insert) with the current node’s value:

        If the value to be inserted is less than the current node’s value, move to the left subtree of the current node.
        If the value to be inserted is greater than or equal to the current node’s value, move to the right subtree of the current node.
        Recursively move through the tree:

        Recursively apply the insertion process on the left or right subtree, depending on the comparison result from step 2.
        Insert at the correct position:

        Continue this process until you find a None position in the tree (where a child node should be inserted).
        Create a new node with the given value and attach it to the parent node as either the left or right child.
        Return the updated node (root) back up the recursion stack.
Traversal:
        1. In-Order Traversal:
                In this traversal, we visit the left subtree, then the root, and then the right subtree. For a BST, this traversal visits the nodes in ascending order of their values.

                Algorithm (In-Order Traversal):
                Start at the root node.
                Recursively traverse the left subtree (go to the left child).
                Visit the current node (process the node, e.g., print its value).
                Recursively traverse the right subtree (go to the right child).
                Repeat steps 2–4 for each node until all nodes are visited.
        2. Pre-Order Traversal:
                In this traversal, we visit the root node first, then recursively visit the left subtree, and finally the right subtree. It is useful for copying a tree or creating a clone of the tree.

                Algorithm (Pre-Order Traversal):
                Start at the root node.
                Visit the current node (process the node, e.g., print its value).
                Recursively traverse the left subtree (go to the left child).
                Recursively traverse the right subtree (go to the right child).
                Repeat steps 2–4 for each node until all nodes are visited.
        3. Post-Order Traversal:
                In this traversal, we first recursively visit the left subtree, then the right subtree, and finally the root node. It is useful for deleting a tree or performing cleanup operations.

                Algorithm (Post-Order Traversal):
                Start at the root node.
                Recursively traverse the left subtree (go to the left child).
                Recursively traverse the right subtree (go to the right child).
                Visit the current node (process the node, e.g., print its value).
                Repeat steps 2–4 for each node until all nodes are visited.


Steps for BFS Algorithm:
        Initialize:
        Create a queue to store the nodes to be visited.
        Create a visited list to keep track of visited nodes to avoid revisiting them.
        Mark the starting node as visited and enqueue it.
        Visit the Nodes:
        Dequeue a node from the queue.
        Process the node (e.g., print it, store it in a list).
        Enqueue all its unvisited neighbors and mark them as visited.
        Repeat:
        Continue this process until the queue is empty, meaning all reachable nodes have been visited.

BFS Algorithm (in pseudocode):
       
        BFS(Graph, start_node):
        Initialize an empty queue Q
        Create a visited list (or array) to track visited nodes
        Enqueue the start_node into Q and mark it as visited
        
        while Q is not empty:
                current_node = Dequeue(Q)      // Remove the front node
                Process the current_node       // (e.g., print it, store it, etc.)
                
                for each neighbor of current_node:
                if neighbor is not visited:
                        Mark neighbor as visited
                        Enqueue neighbor into Q


Prims Algorithm:
        Create a matrix (or an array) to represent the graph, where graph[i][j] represents the weight of the edge between vertex i and vertex j. If no edge exists, set graph[i][j] = 0.
        Create an array key[] to store the minimum weight edge that connects each vertex to the growing MST.
        Create an array parent[] to keep track of the MST structure. This will help reconstruct the MST at the end.
        Use a boolean array inMST[] to track which vertices have already been included in the MST.
        Start with an Initial Vertex:

        Initialize key[startnode] = 0 for the start node, and inMST[startnode] = true to mark it as the starting point.
        For all other vertices, initialize key[] = ∞ and inMST[] = false.
        Main Loop to Build MST:

        For each vertex v, find the vertex u that is not in the MST yet, and has the smallest edge weight (key[u]) connecting it to the vertices in the MST.
        Include vertex u in the MST (inMST[u] = true).
        Update the key[] values for all adjacent vertices v of u:
        If the weight of the edge graph[u][v] is smaller than the current key[v] and v is not already in the MST, update key[v] to graph[u][v] and set parent[v] = u.
        Repeat the Process:

        Repeat the process for all vertices. Continue until all vertices are included in the MST.
        Reconstruct the MST:

        After the algorithm terminates, the parent[] array will represent the MST. The edges in the MST can be represented as parent[v] - v for each vertex v that is not the start node.
        Edge Case:

        Handle disconnected graphs: If the graph is not fully connected, Prim's algorithm will only find the MST for the connected component containing the start node.
        Key Points to Consider:
        Initialization: The key[] values should start as ∞ (or a very large value), except for the starting node, which is set to 0.
        Priority Queue (Optional): For efficiency, instead of using a linear search to find the vertex with the smallest key[] value, you can use a priority queue (min-heap) to reduce the time complexity of the algorithm.
        Edge Weights: Prim's algorithm works best with graphs where all edges have non-negative weights. If the graph has negative weights, the algorithm can still work but may require extra care.



How to find MST using Kruskal’s algorithm?
        Below are the steps for finding MST using Kruskal’s algorithm:

        Sort all the edges in non-decreasing order of their weight. 
        Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If the cycle is not formed, include this edge. Else, discard it. 
        Repeat step#2 until there are (V-1) edges in the spanning tree.
        Step 2 uses the Union-Find algorithm to detect cycles. 


        So we recommend reading the following post as a prerequisite. 