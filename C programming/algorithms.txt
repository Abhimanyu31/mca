1. Stack using linked list::
            Step 1: Define the Node Structure
            Step 2: Define the Stack Structure (Class or Structure)
                The stack will have:
                    A pointer (top) that points to the top of the stack (the most recently added node).
                    Methods to perform operations on the stack: push, pop, peek, isEmpty.
            Step 3: Initialize the Stack
                To begin using the stack, initialize it by creating an object of the Stack class. This will automatically set the top pointer to None, indicating the stack is empty.
            Step 4: Implement the push() Operation
                The push operation adds a new element to the top of the stack:
                    Create a new node with the given value.
                    Set the new nodeâ€™s next pointer to the current top node.
                    Update the top pointer to point to the new node.
            Step 5: Implement the pop() Operation
                The pop operation removes the element from the top of the stack:
                Check if the stack is empty (i.e., if top is None). If the stack is empty, throw an error (stack underflow).
                Save the current top node in a temporary variable.
                Update the top pointer to the next node in the stack (top.next).
                Deallocate (delete) the old top node and return its value.
            Step 6: Implement the peek() Operation
                The peek operation allows you to view the value of the top element without removing it:

                Check if the stack is empty (i.e., if top is None). If the stack is empty, throw an error (stack underflow).
                Return the data of the top node.
                                    
2. Queue using linked list:
            Step 1: . Define the Node Structure
                    Each node in the linked list represents an element in the queue. The node has two parts:
                    Data: Stores the actual value.
                    Next: Points to the next node in the queue.
            step 2: Define the Queue Class
                    The queue class will contain two main pointers:
                    Front: Points to the first element of the queue (head of the linked list).
                    Rear: Points to the last element of the queue (tail of the linked list).
                    We also need to keep track of the size of the queue (optional but useful for some operations).
            step 3: Enqueue Operation (Add to the Rear)
                    To enqueue an item, create a new node and:
                    If the queue is empty, both the front and rear will point to this new node.
                    If the queue is not empty, link the current rear to the new node and update the rear pointer to the new node.
            step 4:  Dequeue Operation (Remove from the Front)
                    To dequeue an item, remove the front node and:
                    If there is only one node in the queue (i.e., both front and rear are the same), update both the front and rear pointers to None.
                    If there are more nodes, update the front pointer to point to the next node
            Step 5: Display





